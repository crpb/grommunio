###############################################################################
# SNIPPETS
###############################################################################
# Run bulk calls with grommunio-admin shell
###############################################################################
# time bash -c 'BULK...' -> real    0m1.046s user    0m0.865s sys     0m0.143s 
# vs. a loop
# time bash -c 'while read..' -> real    0m21.029s user    0m18.082s sys     0m2.854s 

MBXS=$(gromox-mbop foreach.mb echo-username)
BULK="$(printf "exmdb %s store get\n" $MBXS)" 
grommunio-admin shell -n <<< "$BULK" 2>/dev/null

# or quick and dirty..
grommunio-admin shell -n <<< "$(for user in $(gromox-mbop foreach.mb echo-username); do printf "exmdb %s store get normalmessagesizeextended \n" "$user"; done)"

# a little bit easier to parse
STUFF="prohibitreceivequota prohibitsendquota assocmessagesizeextended normalmessagesizeextended"
grommunio-admin shell -n <<< "$(for user in $(gromox-mbop foreach.mb echo-username); do printf "exmdb %s store get %s \n" "$user" "$STUFF" ; done)" 2>/dev/null | awk '{ if ($1=="exmdb") { print $2} else if ($1=="tag" && $2=="value") {next} else { print } }'

# another variant 
STUFF="prohibitreceivequota prohibitsendquota assocmessagesizeextended normalmessagesizeextended";
...  2>/dev/null |awk '{ if ($1=="exmdb") { mailbox=$2} else if ($1=="tag" && $2=="value") {next} else { print mailbox, $0 } }'

# or as json by @deajan
# from https://github.com/netinvent/grommunio_exporter/blob/main/grommunio_exporter/grommunio_api.py#L197C54-L197C267
...   | awk 'BEGIN {printf "[["} {if ($1=="") {next}; if ($1=="exmdb") {sep=""; if (first==1) { printf "],["} else {first=1}}; if ($1~/^0x/) {next} ; printf"\n%s{\"%s\": \"%s\"}", sep,$1,$2; sep=","} END { printf "]]" }'

# Getting greedy!
## sure i could have made that first thing not call a hundred different programs... 
STUFF="$(grommunio-admin taginfo '*' | awk '{gsub(/,/,"", $3); printf "%s ", tolower($3)}')" ; time grommunio-admin shell -n <<< "$(for user in $(gromox-mbop foreach.mb echo-username); do printf "exmdb %s store get %s \n" "$user" "$STUFF" ;done)"  2>/dev/null |sed '/^$/d' |awk '{ if ($1=="exmdb") { mailbox=$2} else if ($1=="tag" && $2=="value") {next} else { printf "%s\t%s\n", mailbox, $0 } }'


# json jq gefuddel™ 
STUFF="$(grommunio-admin taginfo '*' | awk '{gsub(/,/,"", $3); printf "%s ", tolower($3)}')";  grommunio-admin shell -n <<< "$(for user in $(gromox-mbop foreach.mb echo-username); do printf "exmdb %s store get %s --format=json-kv\n" "$user" "$STUFF" ;done)"  2>/dev/null |sed '/^$/d' |awk '{ if ($1=="exmdb") { mailbox=$2 } else if ($1=="tag" && $2=="value") {next} else { printf "%s\t%s\n", mailbox, $0 } }' |while IFS=$'\t' read -r username json; do jq --arg username "$username" '{mbx: $username, exmdb: .}' <<< "$json"; done


# user devices .... the silly way? /ó\

grom_get_devices ()
{
	MBXS=$(gromox-mbop foreach.mb echo-username);
	BULK="$(printf "user devices %s list\n" $MBXS)";
	echo "$BULK" | grommunio-admin shell -n 2> /dev/null | sed '/^$/d' | awk '{ if ($1=="user" && $2=="devices") { mailbox=$3 } else if ($1=="ID" && $2=="Device") {next} else if ($1=="(No" && $2=="devices)") {next} else { printf "\"%s\"\t\"%s\"\t\"%s\"\t\"%s\"\t\"%s\"\t\"%s\"\t\"%s\"\n", mailbox, $1,$2,$3,$4,$5,$6 } }'
}


###############################################################################
# BULK OBJECT MOVING VIA SQLITE (handle with care!)
###############################################################################
# THIS MIGHT BE A DESTRUCTIVE TASK SO DON'T DO THIS IN YOUR LIVE SYSTEM FOR FUN
###############################################################################

sqlite>  SELECT distinct(p.folder_id),
   ...>           p.parent_id,
   ...>           f1.propval AS foldername
   ...>      FROM folders p
   ...>      JOIN folder_properties f1
   ...>        ON f1.folder_id = p.folder_id
   ...>       AND f1.proptag = 805371935
   ...>     ORDER BY p.folder_id;
1||Root Container
2|1|Deferred Action
3|1|Spooler Queue
4|1|Shortcuts
5|1|Finder
6|1|Views
7|1|Common Views
8|1|Schedule
9|1|Top of Information Store
10|9|Sent Items
11|9|Deleted Items
12|9|Outbox
13|9|Inbox
14|9|Drafts
15|9|Calendar
16|9|Journal
17|9|Notes
18|9|Tasks
19|9|Contacts
20|19|Quick Contacts
21|19|IM Contacts List
22|19|GAL Contacts
23|9|Junk Email
24|1|Freebusy Data
25|9|Sync Issues
26|25|Conflicts
27|25|Local Failures
28|25|Server Failures
29|9|Conversation Action Settings
258|1|Reminders
259|1|To-do Search
sqlite> update messages set parent_fid = 11 where parent_fid = 13;
sqlite> select count(*) from messages WHERE parent_fid = 13;
0
sqlite> select count(*) from messages WHERE parent_fid = 11;
110236


###############################################################################
# create testdata in all mailboxes (genmails from src:gromox/tools/genmails)
###############################################################################
# zypper in gnu_parallel / apt-get install parallel
###############################################################################
users=( $(gromox-mbop foreach.mb echo-username) );  parallel --jobs "${#users}" "/root/scripts/tools/genmails 100 |sed '/To:/ s/user@example.com/'{1}'/' | gromox-mbox2mt  -  | gromox-mt2exm -D -u {1}" ::: ${users[@]} ::: {1..10}


###############################################################################
# Bulkupdate web-settings?
###############################################################################
# TEST IF BONKERS WOULD WORK
###############################################################################

# jq '.settings.zarafa.v1.contexts.mail.delegate_sent_items_style = "both"' <(gromox-mbop -u cb@clownflare.de get-websettings) |grep delegate
            "delegate_sent_items_style": "both"
# jq '.settings.zarafa.v1.contexts.mail.delegate_sent_items_style = "delegate"' <(gromox-mbop -u cb@clownflare.de get-websettings) |grep delegate
            "delegate_sent_items_style": "delegate"
# jq '.settings.zarafa.v1.contexts.mail.delegate_sent_items_style = ""' <(gromox-mbop -u cb@clownflare.de get-websettings) |grep delegate
            "delegate_sent_items_style": ""

###############################################################################
# RUN UPDATE ON ALL MAILBOXES
###############################################################################
for user in $(gromox-mbop foreach.mb echo-username); do 
    # the next line is just to take a backup, nothing more
    gromox-mbop -u "$user" get-websettings > "$user".json ; 
   jq '.settings.zarafa.v1.contexts.mail.delegate_sent_items_style = "both"' <(gromox-mbop -u "$user" get-websettings)  | gromox-mbop -u "$user" set-websettings - ;
doneo


###############################################################################
# PURGE ALL DATA FROM A MAILBOX /ó\
###############################################################################

gromox-mbop foreach.here.mb \( Aecho-username \) \( Aemptyfld --nuke-folders IPM_SUBTREE \) \( Apurge-softdelete -r IPM_SUBTREE \) \( Apurge-datafiles \) \( Avacuum \) \( Arecalc-sizes \) \( Aunload \)


###############################################################################
# REDIS - Use additional database for antispam/rspamd
###############################################################################

## Create configuration file
sed 's/default/grommunio-antispam/g ; s/6379/6380/g ' /etc/redis/grommunio.conf > /etc/redis/grommunio-antispam.conf
## Create directory
install -o redis -g redis -m 750 -d /var/lib/redis/grommunio-antispam
## and switch to the new directory
cd $_
## dump default grommunio db so we have a copy (we disregard the grommunio-sync states for now)
redis-cli -p 6379 --rdb dump.rdb
## activate the service and start it directly
systemctl --now enable redis@grommunio-antispam
## Test if we can access it and see if the data is the ~same/similiar
redis-cli -p 6379 --scan --pattern "RS*" |wc -l
redis-cli -p 6380 --scan --pattern "RS*" |wc -l
# RSPAMD Configuration switch
## Create local override
printf 'read_servers = "127.0.0.1:6380";\nwrite_servers = "127.0.0.1:6380";\ndmarc {\n\tservers = "127.0.0.1:6380";\n }\n' > /etc/grommunio-antispam/local.d/redis.conf
systemctl restart grommunio-antispam
## Check if override was applied
rspamadm configdump redis



###############################################################################
# sqlite3 backup specific table to json dump 
###############################################################################

sqlite3 -readonly foo.sqlite3 <<< EOF
.output moo.json
.mode json
SELECT * FROM permissions;
.quit
EOF

