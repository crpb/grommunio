#!/bin/bash
export PATH=/sbin:/usr/sbin:/usr/bin:/bin
set -e
recover_svcs() {
  /usr/bin/systemctl start gromox-midb.service gromox-imap.service gromox-pop3.service
}
trap "recover_svcs" ERR

SERVICES=( gromox-midb.service gromox-imap.service gromox-pop3.service )

BACKUPROOT=/opt/restore
# THEY MUST END WITH A SLASH!!1
SOURCEDIRS=( /var/lib/gromox/ )

LASTBACKUPDIR=$(ls -td $BACKUPROOT/*/ | head -1)
NEWBACKUPDIR="$BACKUPROOT/$(date +%Y-%M-%d_%H:%M)"

ETCFLDS="grom\|postfix"
RSYNCOPTS="-rau --partial --delete-after"
MYSQLDUMPOPTS="--single-transaction --routines --triggers --events --add-drop-database"

#Check if dir exists or exit
if [ ${#BACKUPROOT} -gt 0 ]; then
  if grep -qs "${BACKUPROOT}" /proc/mounts; then
    #echo "NFS-Mount available."
    true
  else
    echo "${BACKUPROOT} not mounted."
    #    mount "${BACKUPROOT}"
    if mount "${BACKUPROOT}"; then
      echo "Successfully mounted ${BACKUPROOT}"
    else
      echo "Failed to mount ${BACKUPROOT}, exiting."
      exit 1
    fi
  fi
else
  echo "Couldn't mount backup directory, exiting."
  exit 1
fi

#get mysql-info's and `eval` so they will be available as var
MYSQL_CFG="/etc/gromox/mysql_adaptor.cfg"
if [ ! -e "${MYSQL_CFG}" ] ; then
  echo "MySQL configuration not found. ($MYSQL_CFG)"
  exit 1
fi
MYSQL_USERNAME=$(sed -ne 's/^mysql_username\s*=\s*\(.*\)/\1/p' ${MYSQL_CFG})
if [ -z "$MYSQL_USERNAME" ]; then
  MYSQL_USERNAME="root"
fi
MYSQL_PASSWORD=$(sed -ne 's/^mysql_password\s*=\s*\(.*\)/\1/p' ${MYSQL_CFG})
MYSQL_DBNAME=$(sed -ne 's/^mysql_dbname\s*=\s*\(.*\)/\1/p' ${MYSQL_CFG})
if [ -z "$MYSQL_DBNAME" ]; then
  MYSQL_DBNAME="grommunio"
fi
if [ "${MYSQL_DBNAME:0:1}" = "-" ]; then
  echo "Cannot use that dbname: ${MYSQL_DBNAME}"
  exit 1
fi
MYSQL_HOST=$(sed -ne 's/^mysql_host\s*=\s*\(.*\)/-h\1/p' ${MYSQL_CFG})
if [ -z "$MYSQL_HOST" ]; then
  MYSQL_HOST="localhost"
fi
MYSQL_QUERY="SELECT username,maildir from users where id <> 0 and maildir <> \"\";"

CONFIG_FILE=$(mktemp)
cat <<CONFFILE >"${CONFIG_FILE}"
[client]
user=${MYSQL_USERNAME}
password=${MYSQL_PASSWORD}
host=${MYSQL_HOST}
database=${MYSQL_DBNAME}
CONFFILE

cleanup() { rm -f "$CONFIG_FILE" ; }
trap cleanup EXIT

date -Is
echo "Stopping midb/pop3/imap services"
# stop services to/and cleanup sqlites
/usr/bin/systemctl stop ${SERVICES}
for d in $(grommunio-admin user query maildir |sed '/^$/d'); do
  /usr/sbin/gromox-mbop -d $d vacuum;
  /usr/sbin/gromox-mbop -d $d purge-datafiles;
done

# Try to create a LVM-Snapshot
DISKSOURCE=$(findmnt /var/lib/gromox --noheadings --output SOURCE)
# Check if it is a lvm volume
if lvdisplay $DISKSOURCE >/dev/null; then
  if /sbin/lvcreate -l10%FREE --snapshot --name s_maildir /dev/gromox/maildir; then
    echo "Snapshot created."
    ## TEMPORARY MOUNT POINT
    SNAPPATH=$(mktemp --suffix=lvmsnap --directory)
    ## MOUNT XFS ( we need -o nouuid as xfs doesn't like duplicates of UUIDs )
    /usr/bin/mount -o nouuid /dev/gromox/s_maildir $SNAPPATH
    BACKUPROOT=$SNAPPATH
  fi
fi
# Whether we have a snapshot or not, we can start the Services again.
echo "Starting midb/pop3/imap services"
/bin/date -Is
/usr/bin/systemctl start ${SERVICES}

#CREATE BACKUPDIRS
mkdir -p ${NEWBACKUPDIR}/{confs,mysql,fs} || echo "[ERROR] could not create Directories in ${BACKUPROOT}"

#CONFIGS
echo "Creating archive of etc-configs"
cd /
find etc/ -maxdepth 1 -type d -iregex ".*\(${ETCFLDS}\).*" -exec tar -czf "${BACKUPROOT}/confs/etc.tar.gz" {} +  || echo "[ERROR] config-files"
ls -sh "${BACKUPROOT}/confs/etc.tar.gz"
#MYSQLDUMP
# shellcheck disable=SC2154
echo "Creating mysqldump"
COMMAND="mysqldump --defaults-file=${CONFIG_FILE} ${MYSQLDUMPOPTS}"
$COMMAND > "${BACKUPROOT}/mysql/${mysql_dbname}.sql" || (echo "[ERROR] ${COMMAND//word=*--data/word= --data}")
ls -sh "${BACKUPROOT}/mysql/${mysql_dbname}.sql" 

#RSYNC
echo "Starting Rsync of ${SOURCEDIRS[@]}"
COMMAND="rsync ${RSYNCOPTS} --link-dest ${LATESTBACKUPDIR} ${SOURCEDIRS[@]} ${NEWBACKUPDIR}/fs"
#rm -rf ${LATESTBACKUPDIR}
time $COMMAND || echo "[ERROR] ${COMMAND}"

# # cleanup working snapshot
# echo "Deleting snapshot ${SNAPPATH}"
# /usr/bin/snapper -c ${SNAPCONF} delete ${SNAPNUM}

echo
echo "Data usage:"
echo "grommunio-admin fs du:"
/usr/sbin/grommunio-admin fs du
echo
echo "Backup directory:"
/usr/bin/du -hs "${BACKUPROOT}"
date -Is
